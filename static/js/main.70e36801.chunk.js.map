{"version":3,"sources":["redux/actiontypes.js","redux/reducers.js","redux/store.js","redux/actioncreate.js","compos/TodoHeader.js","compos/TodoList.js","compos/DoneList.js","App.js","serviceWorker.js","index.js"],"names":["ADD_TODO","TOGGLE_COMPLETE","DELETE_TODO","initState","todos","id","parseInt","Math","random","isComplete","title","reducer","newState","state","arguments","length","undefined","action","type","concat","Object","toConsumableArray","payload","map","item","console","log","filter","store","createStore","actions","addTodo","toggleComplete","deleteTodo","TodoHeader","e","value","document","getElementById","newTodo","this","props","_this","react_default","a","createElement","className","placeholder","onClick","addCount","React","Component","connect","objectSpread","todoChange","event","target","val","getAttribute","i","_this2","todo","index","key","checked","onChange","data_id","getUnfinishedCount","getTodos","DoneList","getdone","someStyle","margin","App","es","style","compos_TodoHeader","TodoList","compos_DoneList","Boolean","window","location","hostname","match","ReactDOM","render","src_App","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.70e36801.chunk.js","sourcesContent":["//添加待办事项\r\nexport const ADD_TODO = 'ADD_TODO';\r\n//更改待办项的完成状态\r\nexport const TOGGLE_COMPLETE = 'TOGGLE_COMPLETE';\r\n//删除事项\r\nexport const DELETE_TODO = 'DELETE_TODO';\r\n","import { ADD_TODO, TOGGLE_COMPLETE, DELETE_TODO } from './actiontypes.js';\r\n\r\nlet initState = {\r\n  todos: [\r\n    {\r\n      id: parseInt(Math.random() * 10000000),\r\n      isComplete: false,\r\n      title: '学习redux'\r\n    }, {\r\n      id: parseInt(Math.random() * 10000000),\r\n      isComplete: true,\r\n      title: '学习react'\r\n    }, {\r\n      id: parseInt(Math.random() * 10000000),\r\n      isComplete: false,\r\n      title: '学习node'\r\n    }\r\n  ]\r\n};\r\n\r\nfunction reducer(state = initState, action) {\r\n  let newState;\r\n  switch (action.type) {\r\n    case ADD_TODO:\r\n      newState = {\r\n        todos: [\r\n          ...state.todos,\r\n          action.payload\r\n        ]\r\n      };\r\n      break;\r\n    case TOGGLE_COMPLETE:\r\n      newState = {\r\n        //循环每一条待办，把要修改的记录更新\r\n        todos: state.todos.map(item => {\r\n          if (item.id == action.payload) {\r\n            item.isComplete = !item.isComplete;\r\n          }\r\n          return item;\r\n        })\r\n      };\r\n      break;\r\n    case DELETE_TODO:\r\n      console.log(\"wwwwwwwwwww\", action.payload)\r\n      newState = {\r\n        todos: state.todos.filter(item => {\r\n          return item.id != action.payload\r\n        })\r\n      };\r\n      break;\r\n    default:\r\n      newState = state;\r\n      break;\r\n  }\r\n  return newState;\r\n}\r\nexport default reducer;","import {createStore} from 'redux';\r\nimport reducer from './reducers';\r\n\r\nlet store = createStore(reducer);//传入reducer\r\nexport default store;","import {ADD_TODO,TOGGLE_COMPLETE,DELETE_TODO} from './actiontypes';\r\n\r\nlet actions = {\r\n  addTodo: function(payload) {\r\n    return {type: ADD_TODO, payload};\r\n  },\r\n  toggleComplete: function(payload) {\r\n    return {type: TOGGLE_COMPLETE, payload};\r\n  },\r\n  deleteTodo: function(payload) {\r\n    return {type: DELETE_TODO, payload};\r\n  }\r\n};\r\n\r\nexport default actions;//导出ActionCreators","import React from 'react';\r\n// import ReactDOM from 'react-dom';\r\nimport { connect } from 'react-redux';\r\nimport actions from '../redux/actioncreate.js';\r\nimport  \"./all.css\"\r\n\r\nclass TodoHeader extends React.Component {\r\n    //取得未完成的todo数量\r\n    \r\n    addCount(e){\r\n        var value=document.getElementById(\"shuru\").value;\r\n        var newTodo ={\r\n            id: parseInt(Math.random() * 10000000),\r\n            isComplete: false,\r\n            title: value\r\n          }\r\n          this.props.addTodo(newTodo)\r\n        // this.props.addTodo(newTodo)\r\n    }\r\n    render() {\r\n        return (\r\n            <div className='bigbox'>ToDoList  \r\n                <input placeholder='请输入待办事项' id=\"shuru\" className='do'></input>\r\n                \r\n                <button onClick={(e)=>{this.addCount(e)} }>确认</button>\r\n                \r\n                \r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\n\r\nexport default connect((state) => ({\r\n    ...state\r\n}),actions)(TodoHeader);\r\n\r\n","import React from 'react';\r\n// import ReactDOM from 'react-dom';\r\nimport { connect } from 'react-redux';\r\nimport  \"./all.css\"\r\nimport actions from '../redux/actioncreate.js';\r\nclass TodoHeader extends React.Component {\r\n    todoChange = (event) => {\r\n        //当onChange事件发生时，调用toggleComplete动作\r\n        this.props.toggleComplete(event.target.value);\r\n    }\r\n    deleteTodo = (e) => {\r\n        var val = e.target.getAttribute(\"data_id\")\r\n\r\n        this.props.deleteTodo(val)\r\n    }\r\n    getUnfinishedCount() {\r\n        //this.props.todos就是从connect传入的state数据\r\n        console.log(this.props)\r\n        return this.props.todos.filter((i) => {\r\n            return i.isComplete === false;\r\n        }).length;\r\n    }\r\n    getTodos() {\r\n        return this.props.todos.map((todo, index) => {\r\n            if (!todo.isComplete) {\r\n                return (\r\n\r\n                    <div >\r\n                        <li key={index}>\r\n                            <input type=\"checkbox\" value={todo.id} checked={todo.isComplete} onChange={this.todoChange} />\r\n                            <span>{todo.title}</span>\r\n\r\n                            <button type=\"button\" data_id={todo.id} onClick={this.deleteTodo} className='but'>-</button>\r\n                        </li>\r\n                    </div>\r\n\r\n                );\r\n            }\r\n\r\n        });\r\n    }\r\n    render() {\r\n        return (<div className=\"todo\">\r\n                您有{this.getUnfinishedCount()}件事未完成\r\n                {this.getTodos()}\r\n            \r\n        </div>);\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\nexport default connect((state) => ({\r\n    ...state\r\n}), actions)(TodoHeader);\r\n","import React from 'react';\r\n// import ReactDOM from 'react-dom';\r\nimport { connect } from 'react-redux';\r\nimport actions from '../redux/actioncreate.js';\r\nimport \"./all.css\"\r\nclass DoneList extends React.Component {\r\n    //取得已经完成的todo数量\r\n    getUnfinishedCount() {\r\n        //this.props.todos就是从connect传入的state数据\r\n        console.log(this.props)\r\n        return this.props.todos.filter((i) => {\r\n            return i.isComplete === true;\r\n        }).length;  \r\n    }\r\n    deleteTodo = (e) =>{\r\n        var val =e.target.getAttribute(\"data_id\")\r\n         this.props.deleteTodo(val)\r\n    }\r\n    getdone() {\r\n        return this.props.todos.map((todo, index) => {\r\n            if (todo.isComplete) {\r\n                return (\r\n                    <li key={index}>\r\n                        <input type=\"checkbox\" value={todo.id} checked={todo.isComplete} onChange={this.todoChange} />\r\n                        <span>{todo.title}</span>\r\n                        <button type=\"button\" data_id={todo.id} onClick={this.deleteTodo} className='but'>-</button>\r\n                    </li>);\r\n            }\r\n\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className='todo'>\r\n                \r\n                <div>您已完成{this.getUnfinishedCount()}件事</div>\r\n                {this.getdone()}\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\n\r\nexport default connect((state) => ({\r\n    ...state\r\n}),actions)(DoneList);\r\n\r\n","import React from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport { Provider } from 'react-redux';\nimport store from './redux/store.js';\nimport TodoHeader from \"./compos/TodoHeader.js\";\nimport TodoList from \"./compos/TodoList.js\"\nimport DoneList from \"./compos/DoneList.js\"\n\nconst someStyle = {\n  margin:\"50px 200px\"\n}\n\nfunction App() {\n  return (\n    <Provider store={store}>\n    <div style={someStyle}>\n      <TodoHeader />\n      <TodoList />\n      <DoneList />\n    </div>\n      \n    </Provider >\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}